#head(avg_expr_matrix)
#rownames(avg_expr_matrix)
# Create the heatmap
pheatmap(avg_expr_matrix,
scale = "row",  # Scale by rows to visualize gene expression across cell types
##       scale = "none",  # We have already scaled the data manually
cluster_rows = FALSE,
cluster_cols = TRUE,
show_rownames = TRUE,  # Show row names (gene names)
labels_row = rownames(avg_expr_matrix),
show_colnames = TRUE,
main = "Average Gene Expression Across Cell Types",
color = colorRampPalette(c("navy", "white", "firebrick3"))(100))
gc()
library(dplyr)
library(Seurat)
library(patchwork)
ANorm2 <- readRDS("~/Downloads/Seurat_for_scRNA/UC_data/AtoMxseuratObject_045A2.057A1.RDS", refhook = NULL)
# Check the structure of the object
str(ANorm2)
# Get an overview of the Seurat object
ANorm2
# View the metadata (cell-level information)
head(ANorm2@meta.data)
# View the expression matrix
head(ANorm2@assays$RNA@counts)  # Or use @data depending on normalization
#ANorm2 <- subset(ANorm2, subset = nCount_RNA > 1000 & nCount_RNA < 50000)
ANorm2 <- subset(ANorm2, subset = nCount_RNA > 100)
#ANorm2
# Check the spatial data in the Seurat object
str(ANorm2@images)
# Check the structure of the FOV object
str(ANorm2@images$X045A2.057A1)
# Access the coordinates from the centroids object
coordinates <- ANorm2@images$X045A2.057A1@boundaries[[1]]@coords
# View the first few rows of the coordinates (x, y)
head(coordinates)
# Check the structure of coordinates
str(coordinates)
# Create a scatter plot of the coordinates (x, y)
plot(coordinates[, 1], coordinates[, 2], xlab = "X Coordinate", ylab = "Y Coordinate",
main = "Spatial Coordinates of Field of View X045A2", pch = 16, col = "blue")
# Access the cell IDs corresponding to the spots
cell_ids <- ANorm2@images$X045A2.057A1@boundaries[[1]]@cells
tail(cell_ids)
length(cell_ids)
# Check if the column exists in the metadata
colnames(ANorm2@meta.data)
# View the first few rows to check the contents
unique(ANorm2@meta.data$RNA_nbclust_541f16cd.e057.4b94.95d5.ac384bf8821c_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_cd57507b.a4b3.4e16.8f0a.eee0ecaf3463_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_72dacbaf.e20d.453c.aaf5.1e11106579ee_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_c373247d.2511.4f85.af1b.fb35d167c893_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_5baca8ac.a55a.4173.b5cf.91dfa5e9c92b_3_clusters)
# Check if the coordinates exist and are not empty
head(coordinates)
dim(coordinates)
# Define the specific cell types you're interested in
#selected_cell_types <- c("angiogenic.pericyte", "BEST4..epithelial", "cDC1", "cDC2", "Colonocyte", "cycling.stromal", "EECs", "Enterocyte", "Fetal.arterial.EC", "Goblet.cell", "ICC", "Lymphoid.DC", "LYVE1..Macrophage", "Macrophages", "Mesothelium", "Microfold.cell", "mLTo", "Monocytes", "MPO..mono.neutrophil", "myofibroblast", "Neuroblast", "Paneth", "Pericyte", "Stem.cells", "Mature.venous.EC", "Fetal.venous.EC", "Pre.B", "Mature.arterial.EC")
# Subset the Seurat object for those cell types
#ANorm2 <- subset(ANorm2, subset = RNA_nbclust_72dacbaf.e20d.453c.aaf5.1e11106579ee_1_clusters %in% selected_cell_types)
# View the first few rows to check the contents
unique(ANorm2@meta.data$RNA_nbclust_541f16cd.e057.4b94.95d5.ac384bf8821c_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_cd57507b.a4b3.4e16.8f0a.eee0ecaf3463_1_clusters)
unique(ANorm2@meta.data$RNA_nbclust_72dacbaf.e20d.453c.aaf5.1e11106579ee_1_clusters)
gc()
library(ggplot2)
# Visualize the results
#DimPlot(ANorm2, group.by = "SingleR", label = 'TRUE')
# UMAP plot with SingleR labels
DimPlot(ANorm2, group.by = "RNA_nbclust_72dacbaf.e20d.453c.aaf5.1e11106579ee_1_clusters", label = TRUE) +
labs(x = "UMAP1", y = "UMAP2", title = "UMAP with SingleR Cell-Type Labels") +
theme_minimal()
library(dplyr)
library(Seurat)
library(data.table)
expr_data1 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv")
expr_data2 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv")
# Assuming `expr_data1` and `expr_data2` are matrices of normalized expression data
seurat_obj1 <- CreateSeuratObject(counts = expr_data1)
seurat_obj2 <- CreateSeuratObject(counts = expr_data2)
# Optionally, merge both Seurat objects (if comparing conditions within the same object)
combined_seurat_obj <- merge(seurat_obj1, y = seurat_obj2, add.cell.ids = c("condition1", "condition2"))
combined_seurat_obj$condition <- c(rep("condition1", ncol(seurat_obj1)),
rep("condition2", ncol(seurat_obj2)))
# Normalize the data
combined_seurat_obj <- NormalizeData(combined_seurat_obj)
# Find variable features for DE analysis
combined_seurat_obj <- FindVariableFeatures(combined_seurat_obj)
gc()
gc()
library(dplyr)
library(Seurat)
library(data.table)
expr_data1 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv")
expr_data2 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv")
# Assuming `expr_data1` and `expr_data2` are matrices of normalized expression data
seurat_obj1 <- CreateSeuratObject(counts = expr_data1)
seurat_obj2 <- CreateSeuratObject(counts = expr_data2)
# Optionally, merge both Seurat objects (if comparing conditions within the same object)
combined_seurat_obj <- merge(seurat_obj1, y = seurat_obj2, add.cell.ids = c("condition1", "condition2"))
combined_seurat_obj$condition <- c(rep("condition1", ncol(seurat_obj1)),
rep("condition2", ncol(seurat_obj2)))
combined_seurat_obj[is.na(combined_seurat_obj)] <- 0
gc()
library(dplyr)
library(Seurat)
library(data.table)
expr_data1 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv")
# Replace NAs with 0 in the expression data
expr_data1[is.na(expr_data1)] <- 0
expr_data2 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv")
# Replace NAs with 0 in the expression data
expr_data2[is.na(expr_data2)] <- 0
# Assuming `expr_data1` and `expr_data2` are matrices of normalized expression data
seurat_obj1 <- CreateSeuratObject(counts = expr_data1)
seurat_obj2 <- CreateSeuratObject(counts = expr_data2)
# Optionally, merge both Seurat objects (if comparing conditions within the same object)
combined_seurat_obj <- merge(seurat_obj1, y = seurat_obj2, add.cell.ids = c("condition1", "condition2"))
combined_seurat_obj$condition <- c(rep("condition1", ncol(seurat_obj1)),
rep("condition2", ncol(seurat_obj2)))
# Normalize the data
combined_seurat_obj <- NormalizeData(combined_seurat_obj)
# Find variable features for DE analysis
combined_seurat_obj <- FindVariableFeatures(combined_seurat_obj)
library(dplyr)
library(Seurat)
library(data.table)
expr_matrix_1 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv")
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- fread("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv")
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 2: Reorder the matrices to ensure they have the same gene order and cells in the same order
expr_matrix_1 <- expr_matrix_1[, common_cells, drop = FALSE]
library(dplyr)
library(Seurat)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 2: Reorder the matrices to ensure they have the same gene order and cells in the same order
expr_matrix_1 <- expr_matrix_1[, common_cells, drop = FALSE]
expr_matrix_2 <- expr_matrix_2[, common_cells, drop = FALSE]
# Step 3: Create the union of all cells (including those not common) to fill in the missing cells
all_cells <- union(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 4: Initialize the final combined matrix with zeros (for missing cells)
combined_matrix <- matrix(0, nrow = nrow(expr_matrix_1), ncol = length(all_cells))
rownames(combined_matrix) <- rownames(expr_matrix_1)
colnames(combined_matrix) <- all_cells
# Step 5: Fill the combined matrix with values from both original matrices
combined_matrix[rownames(expr_matrix_1), colnames(expr_matrix_1)] <- expr_matrix_1
combined_matrix[rownames(expr_matrix_2), colnames(expr_matrix_2)] <- expr_matrix_2
head(combined_matrix)
head(colnames(combined_matrix))
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
library(dplyr)
library(Seurat)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Step 3: Identify common genes (rows) and cells (columns)
common_genes <- intersect(rownames(expr_matrix_1), rownames(expr_matrix_2))
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 4: Reorder both matrices to align by common genes and cells
expr_matrix_1 <- expr_matrix_1[common_genes, common_cells, drop = FALSE]
expr_matrix_2 <- expr_matrix_2[common_genes, common_cells, drop = FALSE]
# Step 5: Combine the matrices for the final matrix
all_cells <- union(colnames(expr_matrix_1), colnames(expr_matrix_2))  # Union of cells across both matrices
# Initialize the combined matrix with zeros (or NAs if you prefer)
combined_matrix <- matrix(0, nrow = length(common_genes), ncol = length(all_cells))
# Set the row names and column names
rownames(combined_matrix) <- common_genes
colnames(combined_matrix) <- all_cells
# Step 6: Fill the combined matrix with the data from the two matrices
combined_matrix[common_genes, colnames(expr_matrix_1)] <- expr_matrix_1
combined_matrix[common_genes, colnames(expr_matrix_2)] <- expr_matrix_2
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Step 3: Identify common genes (rows) and cells (columns)
common_genes <- intersect(rownames(expr_matrix_1), rownames(expr_matrix_2))
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 4: Reorder both matrices to align by common genes and cells
expr_matrix_1 <- expr_matrix_1[common_genes, common_cells, drop = FALSE]
expr_matrix_2 <- expr_matrix_2[common_genes, common_cells, drop = FALSE]
# Step 5: Combine the matrices for the final matrix
all_cells <- union(colnames(expr_matrix_1), colnames(expr_matrix_2))  # Union of cells across both matrices
# Initialize the combined matrix with zeros (or NAs if you prefer)
combined_matrix <- matrix(0, nrow = length(common_genes), ncol = length(all_cells))
# Set the row names and column names
rownames(combined_matrix) <- common_genes
colnames(combined_matrix) <- all_cells
# Step 7: Ensure the column names are properly set
head(colnames(combined_matrix))
# Step 6: Fill the combined matrix with the data from the two matrices
# Ensure correct dimensions for filling
combined_matrix[common_genes, colnames(expr_matrix_1)] <- expr_matrix_1[common_genes, colnames(expr_matrix_1)]
combined_matrix[common_genes, colnames(expr_matrix_2)] <- expr_matrix_2[common_genes, colnames(expr_matrix_2)]
gc()
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Step 3: Identify common genes (rows) and cells (columns)
common_genes <- intersect(rownames(expr_matrix_1), rownames(expr_matrix_2))
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 4: Reorder both matrices to align by common genes and cells
expr_matrix_1 <- expr_matrix_1[common_genes, common_cells, drop = FALSE]
expr_matrix_2 <- expr_matrix_2[common_genes, common_cells, drop = FALSE]
# Step 5: Combine the matrices for the final matrix
all_cells <- union(colnames(expr_matrix_1), colnames(expr_matrix_2))  # Union of cells across both matrices
# Initialize the combined matrix with zeros (or NAs if you prefer)
combined_matrix <- matrix(0, nrow = length(common_genes), ncol = length(all_cells))
# Set the row names and column names
rownames(combined_matrix) <- common_genes
colnames(combined_matrix) <- all_cells
# Step 7: Ensure the column names are properly set
head(colnames(combined_matrix))
# Step 6: Fill the combined matrix with the data from the two matrices
# Ensure correct dimensions for filling
combined_matrix[common_genes, colnames(expr_matrix_1)] <- expr_matrix_1[common_genes, colnames(expr_matrix_1)]
combined_matrix[common_genes, colnames(expr_matrix_2)] <- expr_matrix_2[common_genes, colnames(expr_matrix_2)]
# Check dimensions of the matrices
dim(expr_matrix_1)   # Should give you (genes, cells)
dim(expr_matrix_2)   # Should give you (genes, cells)
dim(combined_matrix) # Should match the expected dimension: (genes, cells)
# Check column names of both expression matrices and the combined matrix
head(colnames(expr_matrix_1))  # Columns should correspond to cell names
head(colnames(expr_matrix_2))  # Columns should correspond to cell names
head(colnames(combined_matrix)) # Columns should be the same in combined matrix
gc()
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Step 3: Identify common genes (rows) and cells (columns)
common_genes <- intersect(rownames(expr_matrix_1), rownames(expr_matrix_2))
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
# Step 4: Reorder both matrices to align by common genes and cells
expr_matrix_1 <- expr_matrix_1[common_genes, common_cells, drop = FALSE]
expr_matrix_2 <- expr_matrix_2[common_genes, common_cells, drop = FALSE]
# Step 5: Combine the matrices for the final matrix
all_cells <- union(colnames(expr_matrix_1), colnames(expr_matrix_2))  # Union of cells across both matrices
# Initialize the combined matrix with zeros (or NAs if you prefer)
combined_matrix <- matrix(0, nrow = length(common_genes), ncol = length(all_cells))
# Set the row names and column names
rownames(combined_matrix) <- common_genes
colnames(combined_matrix) <- all_cells
# Step 7: Ensure the column names are properly set
head(colnames(combined_matrix))
# Check dimensions of the matrices
dim(expr_matrix_1)   # Should give you (genes, cells)
dim(expr_matrix_2)   # Should give you (genes, cells)
dim(combined_matrix) # Should match the expected dimension: (genes, cells)
# Check column names of both expression matrices and the combined matrix
head(colnames(expr_matrix_1))  # Columns should correspond to cell names
head(colnames(expr_matrix_2))  # Columns should correspond to cell names
head(colnames(combined_matrix)) # Columns should be the same in combined matrix
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Ensure the matrices have the same row names (genes)
rownames(expr_matrix_1) <- rownames(expr_matrix_2) <- common_genes  # If needed
# Find common and unique columns
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
unique_cells_1 <- setdiff(colnames(expr_matrix_1), common_cells)
unique_cells_2 <- setdiff(colnames(expr_matrix_2), common_cells)
# Create the combined matrix (initializing with zeros)
combined_matrix <- matrix(0, nrow = nrow(expr_matrix_1), ncol = length(c(common_cells, unique_cells_1, unique_cells_2)))
rownames(combined_matrix) <- rownames(expr_matrix_1)  # Genes
colnames(combined_matrix) <- c(common_cells, unique_cells_1, unique_cells_2)
# Fill the combined matrix with the expression values from both matrices
combined_matrix[, common_cells] <- expr_matrix_1[, common_cells]  # Common cells from expr_matrix_1
combined_matrix[, unique_cells_1] <- expr_matrix_1[, unique_cells_1]  # Unique cells from expr_matrix_1
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Ensure the matrices have the same row names (genes)
rownames(expr_matrix_1) <- rownames(expr_matrix_2) <- common_genes  # If needed
# Find common and unique columns
common_cells <- intersect(colnames(expr_matrix_1), colnames(expr_matrix_2))
unique_cells_1 <- setdiff(colnames(expr_matrix_1), common_cells)
unique_cells_2 <- setdiff(colnames(expr_matrix_2), common_cells)
# Create the combined matrix (initializing with zeros)
combined_matrix <- matrix(0, nrow = nrow(expr_matrix_1), ncol = length(c(common_cells, unique_cells_1, unique_cells_2)))
rownames(combined_matrix) <- rownames(expr_matrix_1)  # Genes
colnames(combined_matrix) <- c(common_cells, unique_cells_1, unique_cells_2)
# Fill the combined matrix with the expression values from both matrices
combined_matrix[, common_cells] <- expr_matrix_1[, common_cells]  # Common cells from expr_matrix_1
combined_matrix[, unique_cells_1] <- expr_matrix_1[, unique_cells_1]  # Unique cells from expr_matrix_1
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Step 2: Check the structure of the data
head(expr_matrix_1)
head(expr_matrix_2)
# Check if the genes (rows) are the same in both matrices
all(rownames(expr_matrix_1) == rownames(expr_matrix_2))  # Should return TRUE
# Combine the two matrices column-wise (cells for condition 1 + cells for condition 2)
combined_matrix <- cbind(expr_matrix_1, expr_matrix_2)
# Check the dimensions of the combined matrix (should be 6178 x (n1 + n2))
dim(combined_matrix)
# Verify the combined matrix
head(combined_matrix)
# Check the column names in combined_matrix
head(colnames(combined_matrix))
# Step 7: Visualize or analyze the combined matrix (optional)
library(pheatmap)
pheatmap(combined_matrix, scale = "row", cluster_rows = TRUE, cluster_cols = TRUE, main = "Combined Gene Expression")
# Check the column names in combined_matrix
colnames(combined_matrix)
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Ensure gene names are the row names of both expression matrices
rownames(expr_matrix_1) <- expr_matrix_1$Gene  # If Gene is a column, make it row names
rownames(expr_matrix_2) <- expr_matrix_2$Gene  # If Gene is a column, make it row names
# Remove the 'Gene' column from both matrices (now it should be row names)
expr_matrix_1 <- expr_matrix_1[, -which(names(expr_matrix_1) == "Gene")]
expr_matrix_2 <- expr_matrix_2[, -which(names(expr_matrix_2) == "Gene")]
# Now combine the two matrices (ensure that both have the same row names)
combined_matrix <- cbind(expr_matrix_1, expr_matrix_2)
# Check the dimensions and structure of the combined matrix
dim(combined_matrix)  # Should be (6178 genes x (n1 + n2 cells))
head(rownames(combined_matrix))  # Check the first few row names (genes)
colnames(combined_matrix)
# Load limma package
library(limma)
# Fit the model and perform the DE analysis
fit <- lmFit(combined_matrix, design)
# Create a vector that defines the condition for each cell
condition <- c(rep("Condition1", ncol(expr_matrix_1)), rep("Condition2", ncol(expr_matrix_2)))
# Create a design matrix
design <- model.matrix(~ condition)
# Check the design matrix
head(design)
# Load limma package
library(limma)
# Fit the model and perform the DE analysis
fit <- lmFit(combined_matrix, design)
fit <- eBayes(fit)
# Extract the results
results <- topTable(fit, coef="conditionCondition2", adjust="fdr", number=Inf)
# View the results (the top genes with the largest logFC and lowest p-values)
head(results)
# Filter significant genes (adjusted p-value < 0.05 and |logFC| > 1)
significant_genes <- results %>%
filter(adj.P.Val < 0.05, abs(logFC) > 1)
# View significant genes
head(significant_genes)
# Basic volcano plot
library(ggplot2)
ggplot(results, aes(x=logFC, y=-log10(P.Value))) +
geom_point(aes(color=adj.P.Val < 0.05), alpha=0.6) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot", x="Log Fold Change", y="-Log10 P-value")
library(pheatmap)
# Select top 50 significant genes based on adjusted p-value
top_genes <- rownames(significant_genes)[1:50]
# Subset the data for the heatmap
heatmap_data <- combined_matrix[top_genes, ]
# Plot the heatmap (log-transformed values may be more informative)
pheatmap(log2(heatmap_data + 1), scale="row", cluster_rows=TRUE, cluster_cols=TRUE, show_rownames=TRUE)
# Save the average expression data to a CSV
write.table(results, "~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_vs_ANorem2_gene_DE_by_cell_type_limma.txt", row.names = FALSE)
# Save the average expression data to a CSV
write.table(results, "~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_vs_ANorem2_gene_DE_by_cell_type_limma.txt", row.names = TRUE)
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Ensure gene names are the row names of both expression matrices
rownames(expr_matrix_1) <- expr_matrix_1$Gene  # If Gene is a column, make it row names
rownames(expr_matrix_2) <- expr_matrix_2$Gene  # If Gene is a column, make it row names
# Remove the 'Gene' column from both matrices (now it should be row names)
expr_matrix_1 <- expr_matrix_1[, -which(names(expr_matrix_1) == "Gene")]
expr_matrix_2 <- expr_matrix_2[, -which(names(expr_matrix_2) == "Gene")]
# Now combine the two matrices (ensure that both have the same row names)
combined_matrix <- cbind(expr_matrix_1, expr_matrix_2)
# Check the dimensions and structure of the combined matrix
dim(combined_matrix)  # Should be (6178 genes x (n1 + n2 cells))
head(rownames(combined_matrix))  # Check the first few row names (genes)
colnames(combined_matrix)
# Save combined matrix
write.table(results, "~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_ANorem2_combined_gene_expressions_cell_type.txt", row.names = TRUE)
library(dplyr)
library(data.table)
expr_matrix_1 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_X040A1.038A2_gene_expression_by_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_1[is.na(expr_matrix_1)] <- 0
expr_matrix_2 <- read.csv("~/Downloads/Seurat_for_scRNA/UC_data/ANorm2_X045A2.057A1_gene_expression_by_selected_celltype.csv", row.names = 1)
# Replace NAs with 0 in the expression data
expr_matrix_2[is.na(expr_matrix_2)] <- 0
# Ensure gene names are the row names of both expression matrices
rownames(expr_matrix_1) <- expr_matrix_1$Gene  # If Gene is a column, make it row names
rownames(expr_matrix_2) <- expr_matrix_2$Gene  # If Gene is a column, make it row names
# Remove the 'Gene' column from both matrices (now it should be row names)
expr_matrix_1 <- expr_matrix_1[, -which(names(expr_matrix_1) == "Gene")]
expr_matrix_2 <- expr_matrix_2[, -which(names(expr_matrix_2) == "Gene")]
# Now combine the two matrices (ensure that both have the same row names)
combined_matrix <- cbind(expr_matrix_1, expr_matrix_2)
# Check the dimensions and structure of the combined matrix
dim(combined_matrix)  # Should be (6178 genes x (n1 + n2 cells))
head(rownames(combined_matrix))  # Check the first few row names (genes)
colnames(combined_matrix)
# Save combined matrix
write.table(combined_matrix, "~/Downloads/Seurat_for_scRNA/UC_data/ANorm1_ANorem2_combined_gene_expressions_cell_type.txt", row.names = TRUE)
# 1. Combine the expression data for both conditions
combined_expr_matrix <- cbind(expr_matrix_1, expr_matrix_2)
# 2. Assign condition and cell type to each column
cell_types <- rep(cell_types, 2)  # Assuming cell_types are the same across conditions for the same cells
# 1. Combine the expression data for both conditions
combined_expr_matrix <- cbind(expr_matrix_1, expr_matrix_2)
cell_types <- unique(colnames(combined_expr_matrix))
# 2. Assign condition and cell type to each column
cell_types <- rep(cell_types, 2)  # Assuming cell_types are the same across conditions for the same cells
conditions <- c(rep('Condition1', ncol(expr_matrix_1)), rep('Condition2', ncol(expr_matrix_2)))
# Create a metadata dataframe for the combined data
metadata <- data.frame(CellType = cell_types, Condition = conditions)
library(FUSION)
library(devtools)
library(roxygen2)
load_all(".")
setwd("~/FUSION")
library(devtools)
library(roxygen2)
load_all(".")
library(FUSION)
?FUSION
?FUSION_ps
FUSION_ps(a = "./inst//extdata/example_matrix_p1.txt")
options(max.print = 1e6); sink("~/FUSION_ps_sample_output.txt"); FUSION_ps(a = "./inst//extdata/example_matrix_p3.txt"); sink()
?FUSION_ms
options(max.print = 1e6); sink("~/FUSION_ms_sample_output.txt"); FUSION_ms(a = "./inst//extdata/example_matrix2.txt", S1 = 5, S2 = 5); sink()
load_all(".")
roxygenise()
library(FUSION)

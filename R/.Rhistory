n = length(cl)
mean_diff_shuffled = rep(NA, shuffling_round)
for (i in 1:shuffling_round)
{
cl_shuffled = cl[sample(n)]
coverage1_shuffled = coverage[,cl_shuffled==1]
coverage2_shuffled = coverage[,cl_shuffled==2]
mean_diff_shuffled[i] = sum(abs(rowMeans(coverage1_shuffled) - rowMeans(coverage2_shuffled)))
}
p = length(mean_diff_shuffled[mean_diff_shuffled>=mean_diff]) / shuffling_round
fc = mean_diff / mean(mean_diff_shuffled)
return(c(mean_diff, fc, p))
}
calc.coverage_diff.within_group <- function(coverage)
{
diff = c()
for (i in 1:(ncol(coverage)-1))
{
for (j in (i+1):ncol(coverage))
{
diff = cbind(diff, abs(coverage[,i] - coverage[,j]))
}
}
return(diff)
}
calc.coverage_diff.between_group <- function(coverage1, coverage2)
{
diff = c()
for (i in 1:ncol(coverage1))
{
for (j in 1:ncol(coverage2))
{
diff = cbind(diff, abs(coverage1[,i] - coverage2[,j]))
}
}
return(diff)
}
#plot coverage pattern
plot.coverage <- function(coverage, cl, main="")
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
l = nrow(coverage)
plot(1:l, xlim=c(0, l), ylim=range(coverage), xlab="Position (nt)", ylab="Coverage", main=main, type='n', axes=F)
for (i in 1:ncol(coverage1))
{
lines(1:l, coverage1[,i], lwd=1, col="grey60")
}
for (i in 1:ncol(coverage2))
{
lines(1:l, coverage2[,i], lwd=1, col="red")
}
axis(1)
axis(2)
}
#function to run qMAP for a single sncRNA family
#cl: sample classification vector: only two groups are allowed (1 for controls, 2 for cases, and -1 for the samples to be excluded)
qMAP.single_family <- function(input_dataframe, cl, sncrna_family, parental_rna_filename)
{
anno = a[,1:2]
e = a[,3:ncol(a)]
rownames(e) = a[,1]
e = e[, cl==1 | cl==2]
cl = cl[cl==1 | cl==2]
if (length(cl[cl==1]) < 2 | length(cl[cl==2]) < 2)
{
print("Error: sample size of at least one group is less than two.")
return(NULL)
}
if (grepl("rRNA", sncrna_family))
{
is.sncrna_family = (anno$Annotation==sncrna_family)
} else
{
is.sncrna_family = grepl(sncrna_family, anno$Annotation)
}
e_tmp = e[is.sncrna_family,]
sncrna_family = sub("mature-", "", sncrna_family)
s = unlist(read.fasta(parental_rna_filename, seqtype="DNA", as.string=T, forceDNAtolower=F))
s = s[grepl(sncrna_family, names(s))]
uni_s = unique(s)
z = match(uni_s, s)
parental_rna_list = s[z]
mean_diff = rep(NA, length(parental_rna_list))
t = rep(NA, length(parental_rna_list))
p = rep(NA, length(parental_rna_list))
for (i in 1:length(parental_rna_list))
{
rna = parental_rna_list[i]
names(rna) = "ref_rna"
ref_rna = Biostrings::DNAStringSet(rna)
start = rep(NA, nrow(e_tmp))
len = rep(NA, nrow(e_tmp))
for (j in 1:nrow(e_tmp))
{
input_frag = rownames(e_tmp)[j]
tmp = match_frag_to_ref(input_frag, ref_rna, max.mismatch = 1)
if (!is.null(tmp))
{
start[j] = unlist(tmp[1])
len[j] = unlist(tmp[3])
} else
{
start[j] = NA
len[j] = NA
}
}
e_i = e_tmp[!is.na(start),]
start = start[!is.na(start)]
len = len[!is.na(len)]
coverage = c()
for (j in 1:ncol(e_i))
{
coverage = cbind(coverage, calc.coverage(e_i[,j], start, len, nchar(rna)))
}
colnames(coverage) = colnames(e_i)
rownames(coverage) = 1:nchar(rna)
coverage[is.nan(coverage)] <- 0     #HCR
tmp_result = diff_frag.model1(coverage, cl)
#tmp_result = diff_frag.model2(coverage, cl, shuffling_round = 20)   #HCR
mean_diff[i] = tmp_result[1]
t[i] = tmp_result[2]
p[i] = tmp_result[3]
plot.coverage(coverage, cl, main=c(names(parental_rna_list[i]), mean_diff[i], p[i]))    #HCR
print(names(parental_rna_list[i]))    #HCR
#print(coverage)    #HCR
}
result = data.frame(names(parental_rna_list), mean_diff, t, p)
colnames(result) = c("rna", "diff", "t", "p")
return(result)
}
#a = read.delim("GSE144666_P_cell-reprogramming_M1.reads")
#qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Ala-AGC", parental_rna_filename="../data/parental_rna/mm10-tRNAs_CCA.fa")
#a = read.delim("~/Downloads/fragment_distribution/2025/test_matrix.txt")
a = read.delim("~/Downloads/Wilco/GSE144666_P_cell-reprogramming_M1.reads")
qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Cys-GCA", parental_rna_filename="~/Downloads/Mus_musculus/GtRNAdb/mm10/mm10-tRNAs_CCA.fa")
library(seqinr)
library(matrixStats)
library(Biostrings)
#map sncRNA species (individual fragments) to parental RNA
match_frag_to_ref <- function(input_frag, ref_seq, ...)
{
hit_result = Biostrings::vmatchPattern(pattern = input_frag, subject = ref_seq, ...)
hit = as.data.frame(unlist(hit_result))
if (nrow(hit) < 1) return(NULL)
hit$frag = input_frag
ref_char = as.character(ref_seq)[hit$names]
hit$ref_part = base::substr(ref_char, start = hit$start, stop = hit$end)
return(hit)
}
#calculate coverage pattern (sncRNA mapping) along parental RNA
calc.coverage <- function(expr, start, len, large_rna_length)
{
coverage = rep(0, large_rna_length)
for (i in 1:length(expr))
{
for (j in start[i]:(start[i]+len[i]-1))
{
coverage[j] = coverage[j] + expr[i]
}
}
return(coverage / sum(coverage))
}
#statistical model1 to identify differential fragmentation
diff_frag.model1 <- function(coverage, cl)
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
within_group_diff1 = calc.coverage_diff.within_group(coverage1)
within_group_diff2 = calc.coverage_diff.within_group(coverage2)
between_group_diff = calc.coverage_diff.between_group(coverage1, coverage2)
diff = cbind(within_group_diff1, within_group_diff2, between_group_diff)
rownames(diff) = paste("pos", 1:nrow(coverage), sep="")
g = c(rep(1, ncol(within_group_diff1)), rep(1, ncol(within_group_diff2)), rep(2, ncol(between_group_diff)))
data = data.frame(rep(rownames(diff), ncol(diff)), c(log10(diff + (1e-6))), rep(g, each=nrow(coverage)))
colnames(data) = c("pos", "diff", "group")
lm_summary = summary(lm(data$diff ~ data$pos + data$group))
t = lm_summary$coefficients["data$group",][3]
p = lm_summary$coefficients["data$group",][4]
mean_diff = sum(abs(rowMeans(coverage1) - rowMeans(coverage2)))
return(c(mean_diff, t, p))
}
#statistical model2 to identify differential fragmentation (reshuffling)
diff_frag.model2 <- function(coverage, cl, shuffling_round = 1000)
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
mean_diff = sum(abs(rowMeans(coverage1) - rowMeans(coverage2)))
n = length(cl)
mean_diff_shuffled = rep(NA, shuffling_round)
for (i in 1:shuffling_round)
{
cl_shuffled = cl[sample(n)]
coverage1_shuffled = coverage[,cl_shuffled==1]
coverage2_shuffled = coverage[,cl_shuffled==2]
mean_diff_shuffled[i] = sum(abs(rowMeans(coverage1_shuffled) - rowMeans(coverage2_shuffled)))
}
p = length(mean_diff_shuffled[mean_diff_shuffled>=mean_diff]) / shuffling_round
fc = mean_diff / mean(mean_diff_shuffled)
return(c(mean_diff, fc, p))
}
calc.coverage_diff.within_group <- function(coverage)
{
diff = c()
for (i in 1:(ncol(coverage)-1))
{
for (j in (i+1):ncol(coverage))
{
diff = cbind(diff, abs(coverage[,i] - coverage[,j]))
}
}
return(diff)
}
calc.coverage_diff.between_group <- function(coverage1, coverage2)
{
diff = c()
for (i in 1:ncol(coverage1))
{
for (j in 1:ncol(coverage2))
{
diff = cbind(diff, abs(coverage1[,i] - coverage2[,j]))
}
}
return(diff)
}
#plot coverage pattern
plot.coverage <- function(coverage, cl, main="")
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
l = nrow(coverage)
plot(1:l, xlim=c(0, l), ylim=range(coverage), xlab="Position (nt)", ylab="Coverage", main=main, type='n', axes=F)
for (i in 1:ncol(coverage1))
{
lines(1:l, coverage1[,i], lwd=1, col="grey60")
}
for (i in 1:ncol(coverage2))
{
lines(1:l, coverage2[,i], lwd=1, col="red")
}
axis(1)
axis(2)
}
#function to run qMAP for a single sncRNA family
#cl: sample classification vector: only two groups are allowed (1 for controls, 2 for cases, and -1 for the samples to be excluded)
qMAP.single_family <- function(input_dataframe, cl, sncrna_family, parental_rna_filename)
{
anno = a[,1:2]
e = a[,3:ncol(a)]
rownames(e) = a[,1]
e = e[, cl==1 | cl==2]
cl = cl[cl==1 | cl==2]
if (length(cl[cl==1]) < 2 | length(cl[cl==2]) < 2)
{
print("Error: sample size of at least one group is less than two.")
return(NULL)
}
if (grepl("rRNA", sncrna_family))
{
is.sncrna_family = (anno$Annotation==sncrna_family)
} else
{
is.sncrna_family = grepl(sncrna_family, anno$Annotation)
}
e_tmp = e[is.sncrna_family,]
sncrna_family = sub("mature-", "", sncrna_family)
s = unlist(read.fasta(parental_rna_filename, seqtype="DNA", as.string=T, forceDNAtolower=F))
s = s[grepl(sncrna_family, names(s))]
uni_s = unique(s)
z = match(uni_s, s)
parental_rna_list = s[z]
mean_diff = rep(NA, length(parental_rna_list))
t = rep(NA, length(parental_rna_list))
p = rep(NA, length(parental_rna_list))
for (i in 1:length(parental_rna_list))
{
rna = parental_rna_list[i]
names(rna) = "ref_rna"
ref_rna = Biostrings::DNAStringSet(rna)
start = rep(NA, nrow(e_tmp))
len = rep(NA, nrow(e_tmp))
for (j in 1:nrow(e_tmp))
{
input_frag = rownames(e_tmp)[j]
tmp = match_frag_to_ref(input_frag, ref_rna, max.mismatch = 1)
if (!is.null(tmp))
{
start[j] = unlist(tmp[1])
len[j] = unlist(tmp[3])
} else
{
start[j] = NA
len[j] = NA
}
}
e_i = e_tmp[!is.na(start),]
start = start[!is.na(start)]
len = len[!is.na(len)]
coverage = c()
for (j in 1:ncol(e_i))
{
coverage = cbind(coverage, calc.coverage(e_i[,j], start, len, nchar(rna)))
}
colnames(coverage) = colnames(e_i)
rownames(coverage) = 1:nchar(rna)
coverage[is.nan(coverage)] <- 0     #HCR
#tmp_result = diff_frag.model1(coverage, cl)
tmp_result = diff_frag.model2(coverage, cl, shuffling_round = 0)   #HCR
mean_diff[i] = tmp_result[1]
t[i] = tmp_result[2]
p[i] = tmp_result[3]
plot.coverage(coverage, cl, main=c(names(parental_rna_list[i]), mean_diff[i], p[i]))    #HCR
#print(names(parental_rna_list[i]))    #HCR
#print(coverage)    #HCR
}
result = data.frame(names(parental_rna_list), mean_diff, t, p)
colnames(result) = c("rna", "diff", "t", "p")
return(result)
}
#a = read.delim("GSE144666_P_cell-reprogramming_M1.reads")
#qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Ala-AGC", parental_rna_filename="../data/parental_rna/mm10-tRNAs_CCA.fa")
#a = read.delim("~/Downloads/fragment_distribution/2025/test_matrix.txt")
a = read.delim("~/Downloads/Wilco/GSE144666_P_cell-reprogramming_M1.reads")
qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Cys-GCA", parental_rna_filename="~/Downloads/Mus_musculus/GtRNAdb/mm10/mm10-tRNAs_CCA.fa")
library(seqinr)
library(matrixStats)
library(Biostrings)
#map sncRNA species (individual fragments) to parental RNA
match_frag_to_ref <- function(input_frag, ref_seq, ...)
{
hit_result = Biostrings::vmatchPattern(pattern = input_frag, subject = ref_seq, ...)
hit = as.data.frame(unlist(hit_result))
if (nrow(hit) < 1) return(NULL)
hit$frag = input_frag
ref_char = as.character(ref_seq)[hit$names]
hit$ref_part = base::substr(ref_char, start = hit$start, stop = hit$end)
return(hit)
}
#calculate coverage pattern (sncRNA mapping) along parental RNA
calc.coverage <- function(expr, start, len, large_rna_length)
{
coverage = rep(0, large_rna_length)
for (i in 1:length(expr))
{
for (j in start[i]:(start[i]+len[i]-1))
{
coverage[j] = coverage[j] + expr[i]
}
}
return(coverage / sum(coverage))
}
#statistical model1 to identify differential fragmentation
diff_frag.model1 <- function(coverage, cl)
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
within_group_diff1 = calc.coverage_diff.within_group(coverage1)
within_group_diff2 = calc.coverage_diff.within_group(coverage2)
between_group_diff = calc.coverage_diff.between_group(coverage1, coverage2)
diff = cbind(within_group_diff1, within_group_diff2, between_group_diff)
rownames(diff) = paste("pos", 1:nrow(coverage), sep="")
g = c(rep(1, ncol(within_group_diff1)), rep(1, ncol(within_group_diff2)), rep(2, ncol(between_group_diff)))
data = data.frame(rep(rownames(diff), ncol(diff)), c(log10(diff + (1e-6))), rep(g, each=nrow(coverage)))
colnames(data) = c("pos", "diff", "group")
lm_summary = summary(lm(data$diff ~ data$pos + data$group))
t = lm_summary$coefficients["data$group",][3]
p = lm_summary$coefficients["data$group",][4]
mean_diff = sum(abs(rowMeans(coverage1) - rowMeans(coverage2)))
return(c(mean_diff, t, p))
}
#statistical model2 to identify differential fragmentation (reshuffling)
diff_frag.model2 <- function(coverage, cl, shuffling_round = 1000)
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
mean_diff = sum(abs(rowMeans(coverage1) - rowMeans(coverage2)))
n = length(cl)
mean_diff_shuffled = rep(NA, shuffling_round)
for (i in 1:shuffling_round)
{
cl_shuffled = cl[sample(n)]
coverage1_shuffled = coverage[,cl_shuffled==1]
coverage2_shuffled = coverage[,cl_shuffled==2]
mean_diff_shuffled[i] = sum(abs(rowMeans(coverage1_shuffled) - rowMeans(coverage2_shuffled)))
}
p = length(mean_diff_shuffled[mean_diff_shuffled>=mean_diff]) / shuffling_round
fc = mean_diff / mean(mean_diff_shuffled)
return(c(mean_diff, fc, p))
}
calc.coverage_diff.within_group <- function(coverage)
{
diff = c()
for (i in 1:(ncol(coverage)-1))
{
for (j in (i+1):ncol(coverage))
{
diff = cbind(diff, abs(coverage[,i] - coverage[,j]))
}
}
return(diff)
}
calc.coverage_diff.between_group <- function(coverage1, coverage2)
{
diff = c()
for (i in 1:ncol(coverage1))
{
for (j in 1:ncol(coverage2))
{
diff = cbind(diff, abs(coverage1[,i] - coverage2[,j]))
}
}
return(diff)
}
#plot coverage pattern
plot.coverage <- function(coverage, cl, main="")
{
coverage1 = coverage[,cl==1]
coverage2 = coverage[,cl==2]
l = nrow(coverage)
plot(1:l, xlim=c(0, l), ylim=range(coverage), xlab="Position (nt)", ylab="Coverage", main=main, type='n', axes=F)
for (i in 1:ncol(coverage1))
{
lines(1:l, coverage1[,i], lwd=1, col="grey60")
}
for (i in 1:ncol(coverage2))
{
lines(1:l, coverage2[,i], lwd=1, col="red")
}
axis(1)
axis(2)
}
#function to run qMAP for a single sncRNA family
#cl: sample classification vector: only two groups are allowed (1 for controls, 2 for cases, and -1 for the samples to be excluded)
qMAP.single_family <- function(input_dataframe, cl, sncrna_family, parental_rna_filename)
{
anno = a[,1:2]
e = a[,3:ncol(a)]
rownames(e) = a[,1]
e = e[, cl==1 | cl==2]
cl = cl[cl==1 | cl==2]
if (length(cl[cl==1]) < 2 | length(cl[cl==2]) < 2)
{
print("Error: sample size of at least one group is less than two.")
return(NULL)
}
if (grepl("rRNA", sncrna_family))
{
is.sncrna_family = (anno$Annotation==sncrna_family)
} else
{
is.sncrna_family = grepl(sncrna_family, anno$Annotation)
}
e_tmp = e[is.sncrna_family,]
sncrna_family = sub("mature-", "", sncrna_family)
s = unlist(read.fasta(parental_rna_filename, seqtype="DNA", as.string=T, forceDNAtolower=F))
s = s[grepl(sncrna_family, names(s))]
uni_s = unique(s)
z = match(uni_s, s)
parental_rna_list = s[z]
mean_diff = rep(NA, length(parental_rna_list))
t = rep(NA, length(parental_rna_list))
p = rep(NA, length(parental_rna_list))
for (i in 1:length(parental_rna_list))
{
rna = parental_rna_list[i]
names(rna) = "ref_rna"
ref_rna = Biostrings::DNAStringSet(rna)
start = rep(NA, nrow(e_tmp))
len = rep(NA, nrow(e_tmp))
for (j in 1:nrow(e_tmp))
{
input_frag = rownames(e_tmp)[j]
tmp = match_frag_to_ref(input_frag, ref_rna, max.mismatch = 1)
if (!is.null(tmp))
{
start[j] = unlist(tmp[1])
len[j] = unlist(tmp[3])
} else
{
start[j] = NA
len[j] = NA
}
}
e_i = e_tmp[!is.na(start),]
start = start[!is.na(start)]
len = len[!is.na(len)]
coverage = c()
for (j in 1:ncol(e_i))
{
coverage = cbind(coverage, calc.coverage(e_i[,j], start, len, nchar(rna)))
}
colnames(coverage) = colnames(e_i)
rownames(coverage) = 1:nchar(rna)
coverage[is.nan(coverage)] <- 0     #HCR
#tmp_result = diff_frag.model1(coverage, cl)
tmp_result = diff_frag.model2(coverage, cl, shuffling_round = 2)   #HCR
mean_diff[i] = tmp_result[1]
t[i] = tmp_result[2]
p[i] = tmp_result[3]
plot.coverage(coverage, cl, main=c(names(parental_rna_list[i]), mean_diff[i], p[i]))    #HCR
#print(names(parental_rna_list[i]))    #HCR
#print(coverage)    #HCR
}
result = data.frame(names(parental_rna_list), mean_diff, t, p)
colnames(result) = c("rna", "diff", "t", "p")
return(result)
}
#a = read.delim("GSE144666_P_cell-reprogramming_M1.reads")
#qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Ala-AGC", parental_rna_filename="../data/parental_rna/mm10-tRNAs_CCA.fa")
#a = read.delim("~/Downloads/fragment_distribution/2025/test_matrix.txt")
a = read.delim("~/Downloads/Wilco/GSE144666_P_cell-reprogramming_M1.reads")
qMAP.single_family(a, cl=c(1,1,1,-1,-1,-1,2,2,2), sncrna_family="mature-tRNA-Cys-GCA", parental_rna_filename="~/Downloads/Mus_musculus/GtRNAdb/mm10/mm10-tRNAs_CCA.fa")
